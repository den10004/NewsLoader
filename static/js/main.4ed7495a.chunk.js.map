{"version":3,"sources":["components/card/Card.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","description","item","title","id","raiting","urlToImage","className","src","alt","App","news","json","articles","wrapperReference","useRef","useState","card","setCard","renderNews","slice","handleScroll","e","target","scrollWidth","scrollLeft","clientWidth","useEffect","current","addEventListener","removeEventListener","ref","map","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ow5FAyBeA,MAtBf,SAAcC,GACZ,IAAMC,EAAcD,EAAME,KAAKD,YACzBE,EAAQH,EAAME,KAAKC,MACnBC,EAAKJ,EAAME,KAAKE,GAChBC,EAAUL,EAAME,KAAKG,QACrBC,EAAaN,EAAME,KAAKI,WAE9B,OACE,sBAAKC,UAAU,OAAf,UACE,qBAAKC,IAAKF,EAAYG,IAAI,qDAC1B,sBAAKF,UAAU,eAAf,UACE,sBAAKA,UAAU,aAAf,UACE,6GAAoBH,KACpB,8EAAcC,QAEhB,oBAAIE,UAAU,cAAd,SAA6BJ,IAC7B,oBAAII,UAAU,oBAAd,SAAmCN,WCiC5BS,MA7Cf,WACE,IAAMC,EAAOC,EAAKC,SACZV,EAAQS,EAAKT,MACbC,EAAKQ,EAAKR,GACVC,EAAUO,EAAKP,QACfC,EAAaM,EAAKN,WAMlBQ,EAAmBC,iBAAO,MAChC,EAAwBC,mBANL,IAMnB,mBAAOC,EAAP,KAAaC,EAAb,KACIC,EAAU,sBAAOR,EAAKS,MAAM,EAPb,KAOL,YAAqCT,EAAKS,MAPrC,GAOuDH,KAIpEI,EAAe,SAACC,GAChBA,EAAEC,OAAOC,YAAcF,EAAEC,OAAOE,YAAcH,EAAEC,OAAOG,aAC1DR,EAAQD,EAAO,IAalB,OARAU,qBAAU,WACR,IAAQC,EAAYd,EAAZc,QAER,OADAA,EAAQC,iBAAiB,SAAUR,GAC5B,kBAAMO,EAAQE,oBAAoB,SAAUT,MAElD,CAACA,IAIF,sBAAKd,UAAU,MAAf,UACE,4EACA,oQACA,qBAAKA,UAAU,UAAUwB,IAAKjB,EAA9B,SACGK,EAAWa,KAAI,SAAC9B,EAAM+B,GAAP,OACd,cAAC,EAAD,CAAkB/B,KAAMA,EAAME,GAAIA,EAAIC,QAASA,EAASF,MAAOA,EAAOG,WAAYA,GAAvE2B,YCjCNC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4ed7495a.chunk.js","sourcesContent":["import './card.css';\r\n\r\n\r\nfunction Card(props) {\r\n  const description = props.item.description\r\n  const title = props.item.title\r\n  const id = props.item.id\r\n  const raiting = props.item.raiting\r\n  const urlToImage = props.item.urlToImage\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <img src={urlToImage} alt=\"картинка\" />\r\n      <div className=\"card-wrapper\">\r\n        <div className=\"card__span\">\r\n          <h6>Номер новости: {id}</h6>\r\n          <h6>Рейтинг: {raiting}</h6>\r\n        </div>\r\n        <h4 className=\"card__title\">{title}</h4>\r\n        <h5 className=\"card__description\">{description}</h5>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport json from './news.json'\n\nimport Card from './components/card/Card'\n\n\nfunction App() {\n  const news = json.articles\n  const title = json.title\n  const id = json.id\n  const raiting = json.raiting\n  const urlToImage = json.urlToImage\n  const cardsSumma = 10 //количество рендеров карточек\n\n  //10 карточек одновременно не помещается красиво, поэтому я уменьшил их количество.\n\n\n  const wrapperReference = useRef(null);\n  const [card, setCard] = useState(cardsSumma);\n  let renderNews = [...news.slice(0, cardsSumma), ...news.slice(cardsSumma, card)] //создание итового массива данных\n\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const handleScroll = (e) => {\n    if (e.target.scrollWidth - e.target.scrollLeft <= e.target.clientWidth) {\n     setCard(card + 1)\n     }\n   };\n \n\n  useEffect(() => {\n    const { current } = wrapperReference;\n    current.addEventListener('scroll', handleScroll);\n    return () => current.removeEventListener(\"scroll\", handleScroll);\n    // eslint-disable-next-line\n  }, [handleScroll]);\n\n\n  return (\n    <div className=\"App\">\n      <h1>Новости</h1>\n      <h3>Карточки добавляются по движению ползунка</h3>\n      <div className=\"wrapper\" ref={wrapperReference}>\n        {renderNews.map((item, index) =>\n          <Card key={index} item={item} id={id} raiting={raiting} title={title} urlToImage={urlToImage}/>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}